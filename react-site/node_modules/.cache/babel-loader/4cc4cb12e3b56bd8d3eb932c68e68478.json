{"ast":null,"code":"var _jsxFileName = \"/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //import CountDown from \"./CountDown\";\n// import StopTimer from \"./StopTimer\";\n// import ButtonPlay from \"./ButtonPlay\";\n\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = () => {\n  _s();\n\n  let hours = 0;\n  let minutes = 0;\n  let seconds = 0;\n  const [paused, setPaused] = useState(false);\n  const [over, setOver] = useState(false);\n  const [[h, m, s], setTime] = useState([0, 0, 0]);\n  const valueButton = [{\n    name: 'inactive',\n    value: '&#xe807'\n  }, {\n    name: 'active',\n    value: '\\ue807'\n  }, {\n    name: 'pause',\n    value: '\\u01C1'\n  }];\n\n  const setTimer = () => {\n    if (paused || over) return;\n    if (h === 0 && m === 0 && s === 0) setOver(true);else if (m === 0 && s === 0) {\n      setTime([h - 1, 59, 59]);\n    } else if (s === 0) {\n      setTime([h, m - 1, 59]);\n    } else {\n      setTime([h, m, s - 1]);\n    }\n  };\n\n  const reset = () => {\n    setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n    setPaused(false);\n    setOver(false);\n  };\n\n  useEffect(() => {\n    const timerID = setInterval(() => setTimer(), 1000);\n    return () => clearInterval(timerID);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: `${h.toString().padStart(2, '0')}:\n            ${m.toString().padStart(2, '0')}:\n            ${s.toString().padStart(2, '0')}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setPaused(!paused),\n      children: paused ? 'Resume' : 'Pause'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => reset(),\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"button_play\",\n      type: \"button\",\n      value: valueButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"time\",\n      type: \"time\",\n      id: \"appt\",\n      name: \"appt\",\n      min: \"00:00\",\n      max: \"24:00\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 11\n  }, this);\n}; //   render(\n//     <CountDown hours={1} minutes={45} />,\n//     document.getElementById('root')\n//   );\n//   return (\n//     <div>\n//         < CountDown />\n//         < StopTimer />\n//         < ButtonPlay click = { visualCountDown} titleBtn = {' '}/>\n//     </div>\n//   );\n// };\n\n\n_s(Timer, \"UEcDb4NCf6ekznsU9p2G/i8aMQc=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js"],"names":["React","useState","useEffect","Timer","hours","minutes","seconds","paused","setPaused","over","setOver","h","m","s","setTime","valueButton","name","value","setTimer","reset","parseInt","timerID","setInterval","clearInterval","toString","padStart"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\n//import CountDown from \"./CountDown\";\n// import StopTimer from \"./StopTimer\";\n// import ButtonPlay from \"./ButtonPlay\";\nimport \"./App.css\";\n\nconst Timer = () =>  {\n    \n    let hours = 0;\n    let minutes = 0;\n    let seconds = 0;\n        const [paused, setPaused] = useState(false);\n        const [over, setOver] = useState(false);\n        const [[h, m, s], setTime] = useState([0, 0, 0]);\n        const valueButton = [\n            {name: 'inactive', value:'&#xe807' },\n            {name: 'active', value:'\\ue807' },\n            {name: 'pause', value:'\\u01C1' },\n        ];\n      \n        const setTimer = () => {\n          if (paused || over) return;\n          if (h === 0 && m === 0 && s === 0) setOver(true);\n          else if (m === 0 && s === 0) {\n            setTime([h - 1, 59, 59]);\n          } else if (s === 0) {\n            setTime([h, m - 1, 59]);\n          } else {\n            setTime([h, m, s - 1]);\n          }\n        };\n      \n        const reset = () => {\n          setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n          setPaused(false);\n          setOver(false);\n        };\n      \n        useEffect(() => {\n          const timerID = setInterval(() => setTimer(), 1000);\n          return () => clearInterval(timerID);\n        });\n    \n       return (\n          <div className =\"player\">\n            <span>{`${h.toString().padStart(2, '0')}:\n            ${m.toString().padStart(2, '0')}:\n            ${s.toString().padStart(2, '0')}`}</span>\n            \n            <button onClick={() => setPaused(!paused)}>\n              {paused ? 'Resume' : 'Pause'}\n            </button>\n            <button onClick={() => reset()}>Restart</button>\n            <input className=\"button_play\" type=\"button\" value={valueButton} />\n            <input className=\"time\" type=\"time\" id=\"appt\" name=\"appt\" min=\"00:00\" max=\"24:00\" required />\n          </div>\n        );\n      };\n      \n    //   render(\n    //     <CountDown hours={1} minutes={45} />,\n    //     document.getElementById('root')\n    //   );\n      \n//   return (\n//     <div>\n\n//         < CountDown />\n//         < StopTimer />\n//         < ButtonPlay click = { visualCountDown} titleBtn = {' '}/>\n\n//     </div>\n//   );\n// };\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}