{"ast":null,"code":"var _jsxFileName = \"/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CountDown from \"./CountDown\";\nimport StopTimer from \"./StopTimer\";\nimport ButtonPlay from \"./ButtonPlay\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = () => {\n  _s();\n\n  let countDownTime = new Date();\n  let distance = 0;\n  let now = new Date();\n  let timerId = null; //   let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  //   let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n  //   let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n  const [paused, setPaused] = useState(false);\n  const [over, setOver] = useState(false);\n  const [[h, min, sec], setStopTime] = useState([0, 0, 0]);\n  const titleButton = [{\n    name: \"inactive\",\n    value: \"&#xe807\"\n  }, {\n    name: \"active\",\n    value: \"\\ue807\"\n  }, {\n    name: \"pause\",\n    value: \"\\u01C1\"\n  }];\n\n  const setTimer = () => {\n    distance -= 1000;\n\n    if (distance < 0) {\n      distance = 0;\n      stopTimer();\n    }\n\n    let hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n    let minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n    let seconds = Math.floor(distance % (1000 * 60) / 1000);\n    h = hours.toString().padStart(2, \"0\");\n    min = minutes.toString().padStart(2, \"0\");\n    sec = seconds.toString().padStart(2, \"0\");\n  };\n\n  const stopTimer = () => {\n    clearInterval(timerId);\n  };\n\n  useEffect(() => {\n    const timerID = setInterval(() => setTimer(), 1000);\n    return () => clearInterval(timerID);\n  });\n\n  const visualCountDown = () => {\n    if (timerId === null) {\n      let endDate = new Date();\n      let now = new Date();\n      let inputHM = setStopTime.value;\n      let a = inputHM.split(\":\");\n      endDate.setHours(+a[0]);\n      endDate.setMinutes(+a[1]);\n\n      if (endDate.getTime() < now.getTime()) {\n        distance = endDate.getTime() - now.getTime() + 1000 * 60 * 60 * 24;\n      } else {\n        distance = endDate.getTime() - now.getTime();\n      }\n\n      ;\n    } else {\n      if (paused || over) return;\n    }\n\n    setOver(true);\n    setPaused(true);\n  }; //   const reset = () => {\n  //     setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n  //     setPaused(false);\n  //     setOver(false);\n  //   };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player\",\n      children: [/*#__PURE__*/_jsxDEV(CountDown, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonPlay, {\n        click: visualCountDown,\n        titleButton: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StopTimer, {\n      setStopTime: {\n        h,\n        min,\n        sec\n      },\n      onChange: event => setStopTime(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Timer, \"36rTV4RCVhIQpDpFcgMOomCq/lI=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js"],"names":["React","useState","useEffect","CountDown","StopTimer","ButtonPlay","Timer","countDownTime","Date","distance","now","timerId","paused","setPaused","over","setOver","h","min","sec","setStopTime","titleButton","name","value","setTimer","stopTimer","hours","Math","floor","minutes","seconds","toString","padStart","clearInterval","timerID","setInterval","visualCountDown","endDate","inputHM","a","split","setHours","setMinutes","getTime","event","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CountDown from \"./CountDown\";\nimport StopTimer from \"./StopTimer\";\nimport ButtonPlay from \"./ButtonPlay\";\nimport \"./App.css\";\n\nconst Timer = () => {\n  let countDownTime = new Date();\n  let distance = 0;\n  let now = new Date();\n  let timerId = null;\n//   let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n//   let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n//   let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n  const [paused, setPaused] = useState(false);\n  const [over, setOver] = useState(false);\n  const [[h, min, sec], setStopTime] = useState([0, 0, 0]);\n\n  const titleButton = [\n    { name: \"inactive\", value: \"&#xe807\" },\n    { name: \"active\", value: \"\\ue807\" },\n    { name: \"pause\", value: \"\\u01C1\" },\n  ];\n\n  const setTimer = () => {\n    distance -= 1000;\n    if (distance < 0) {\n      distance = 0;\n      stopTimer();\n    }\n    let hours = Math.floor(\n      (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n    );\n    let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n    let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n    h = hours.toString().padStart(2, \"0\");\n    min = minutes.toString().padStart(2, \"0\");\n    sec = seconds.toString().padStart(2, \"0\");\n  };\n  const stopTimer = () => {\n    clearInterval(timerId);\n  };\nuseEffect(() => {\n        const timerID = setInterval(() => setTimer(), 1000);\n        return () => clearInterval(timerID);\n      });\n  const visualCountDown = () => {\n    if (timerId === null) {\n      let endDate = new Date();\n      let now = new Date();\n      let inputHM = setStopTime.value;\n      let a = inputHM.split(\":\");\n      endDate.setHours(+a[0]);\n      endDate.setMinutes(+a[1]);\n\n      if (endDate.getTime() < now.getTime()) {\n        distance = endDate.getTime() - now.getTime() + 1000 * 60 * 60 * 24;\n      } else {\n        distance = endDate.getTime() - now.getTime();\n      };\n      \n    } else {\n        if (paused || over) return;\n    } \n        setOver(true);\n        setPaused(true);\n    };\n\n\n//   const reset = () => {\n//     setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n//     setPaused(false);\n//     setOver(false);\n//   };\n\n  return (\n    <div>\n      <div className=\"player\">\n        <CountDown />\n        <ButtonPlay click = {visualCountDown}\n                    titleButton />\n\n      </div>\n      <StopTimer\n        setStopTime={{ h, min, sec }}\n        onChange={(event) => setStopTime(event.target.value)}\n      />\n    </div>\n  );\n};\n\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}