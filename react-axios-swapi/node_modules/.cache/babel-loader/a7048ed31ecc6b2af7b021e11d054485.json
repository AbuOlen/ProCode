{"ast":null,"code":"var _jsxFileName = \"/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CountDown from \"./CountDown\";\nimport StopTimer from \"./StopTimer\";\nimport ButtonPlay from \"./ButtonPlay\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = () => {\n  _s();\n\n  let distance = 0;\n  let timerId = null;\n  const [paused, setPaused] = useState(false);\n  const [over, setOver] = useState(false);\n  let [[h, min, sec], setStopTime] = useState([0, 0, 0]);\n  let titleButton = [{\n    name: \"inactive\",\n    value: \"&#xe807\"\n  }, {\n    name: \"active\",\n    value: \"\\ue807\"\n  }, {\n    name: \"pause\",\n    value: \"\\u01C1\"\n  }];\n\n  const setTimer = () => {\n    distance -= 1000;\n\n    if (distance < 0) {\n      distance = 0;\n      stopTimer();\n    }\n\n    let hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n    let minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n    let seconds = Math.floor(distance % (1000 * 60) / 1000);\n    h = hours.toString().padStart(2, \"0\");\n    min = minutes.toString().padStart(2, \"0\");\n    sec = seconds.toString().padStart(2, \"0\");\n  };\n\n  const stopTimer = () => {\n    clearInterval(timerId);\n  };\n\n  useEffect(() => {\n    const timerID = setInterval(() => setTimer(), 1000);\n    return () => clearInterval(timerID);\n  });\n\n  const visualCountDown = () => {\n    if (timerId === null) {\n      let endDate = new Date();\n      let now = new Date();\n      let inputHM = setStopTime.value;\n      let a = inputHM.split(\":\");\n      endDate.setHours(+a[0]);\n      endDate.setMinutes(+a[1]);\n\n      if (endDate.getTime() < now.getTime()) {\n        distance = endDate.getTime() - now.getTime() + 1000 * 60 * 60 * 24;\n      } else {\n        distance = endDate.getTime() - now.getTime();\n      }\n\n      ;\n      timerId();\n      titleButton = titleButton[2].value;\n    } else {\n      if (paused || over) return;\n    }\n\n    setOver(true);\n    setPaused(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player\",\n      children: [/*#__PURE__*/_jsxDEV(CountDown, {\n        hours: h,\n        minutes: min,\n        seconds: sec\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonPlay, {\n        click: visualCountDown,\n        titleButton: titleButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StopTimer, {\n      setStopTime: {\n        h,\n        min,\n        sec\n      },\n      onChange: event => setStopTime(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Timer, \"36rTV4RCVhIQpDpFcgMOomCq/lI=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js"],"names":["React","useState","useEffect","CountDown","StopTimer","ButtonPlay","Timer","distance","timerId","paused","setPaused","over","setOver","h","min","sec","setStopTime","titleButton","name","value","setTimer","stopTimer","hours","Math","floor","minutes","seconds","toString","padStart","clearInterval","timerID","setInterval","visualCountDown","endDate","Date","now","inputHM","a","split","setHours","setMinutes","getTime","event","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CountDown from \"./CountDown\";\nimport StopTimer from \"./StopTimer\";\nimport ButtonPlay from \"./ButtonPlay\";\nimport \"./App.css\";\n\nconst Timer = () => {\n  \n  let distance = 0;\n  let timerId = null;\n\n  const [paused, setPaused] = useState(false);\n  const [over, setOver] = useState(false);\n  let [[h, min, sec], setStopTime] = useState([0, 0, 0]);\n\n  let titleButton = [\n    { name: \"inactive\", value: \"&#xe807\" },\n    { name: \"active\", value: \"\\ue807\" },\n    { name: \"pause\", value: \"\\u01C1\" },\n  ];\n\n  const setTimer = () => {\n    distance -= 1000;\n    if (distance < 0) {\n      distance = 0;\n      stopTimer();\n    }\n    let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n    let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n    h = hours.toString().padStart(2, \"0\");\n    min = minutes.toString().padStart(2, \"0\");\n    sec = seconds.toString().padStart(2, \"0\");\n  };\n  const stopTimer = () => {\n    clearInterval(timerId);\n  };\nuseEffect(() => {\n        const timerID = setInterval(() => setTimer(), 1000);\n        return () => clearInterval(timerID);\n      });\n  const visualCountDown = () => {\n    if (timerId === null) {\n      let endDate = new Date();\n      let now = new Date();\n      let inputHM = setStopTime.value;\n      let a = inputHM.split(\":\");\n      endDate.setHours(+a[0]);\n      endDate.setMinutes(+a[1]);\n\n      if (endDate.getTime() < now.getTime()) {\n        distance = endDate.getTime() - now.getTime() + 1000 * 60 * 60 * 24;\n      } else {\n        distance = endDate.getTime() - now.getTime();\n      };\n      timerId();\n      titleButton = titleButton[2].value;\n    } else {\n        if (paused || over) return;\n    } \n        setOver(true);\n        setPaused(true);\n    };\n\n  return (\n    <div>\n      <div className=\"player\">\n        <CountDown hours = {h}\n                    minutes = {min}\n                    seconds = {sec} />\n        <ButtonPlay click = {visualCountDown}\n                    titleButton = {titleButton} />\n\n      </div>\n      <StopTimer\n        setStopTime={{ h, min, sec }}\n        onChange={(event) => setStopTime(event.target.value)}\n      />\n    </div>\n  );\n};\n\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}