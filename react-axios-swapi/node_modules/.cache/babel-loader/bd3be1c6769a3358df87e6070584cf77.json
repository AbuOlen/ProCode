{"ast":null,"code":"var _jsxFileName = \"/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport CountDown from \"./CountDown\";\nimport StopTimer from \"./StopTimer\";\nimport ButtonPlay from \"./ButtonPlay\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = () => {\n  _s();\n\n  const [paused, setPaused] = useState(false);\n  const [over, setOver] = useState(false);\n  const [[h, m, s], setTime] = useState([0, 0, 0]);\n\n  const tick_tuck = () => {\n    if (paused || over) return;\n    if (h === 0 && m === 0 && s === 0) setOver(true);else if (m === 0 && s === 0) {\n      setTime([h - 1, 59, 59]);\n    } else if (s == 0) {\n      setTime([h, m - 1, 59]);\n    } else {\n      setTime([h, m, s - 1]);\n    }\n  };\n\n  const reset = () => {\n    setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n    setPaused(false);\n    setOver(false);\n  };\n\n  React.useEffect(() => {\n    const timerID = setInterval(() => tick_tuck(), 1000);\n    return () => clearInterval(timerID);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: `${h.toString().padStart(2, '0')}:\n            ${m.toString().padStart(2, '0')}:\n            ${s.toString().padStart(2, '0')}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: over ? \"Time's up!\" : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setPaused(!paused),\n      children: paused ? 'Resume' : 'Pause'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => reset(),\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 11\n  }, this);\n};\n\n_s(Timer, \"UEcDb4NCf6ekznsU9p2G/i8aMQc=\");\n\n_c = Timer;\nReactDOM.render( /*#__PURE__*/_jsxDEV(CountDown, {\n  hours: 1,\n  minutes: 45\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 51,\n  columnNumber: 9\n}, this), document.getElementById('root')); //   return (\n//     <div>\n//         < CountDown />\n//         < StopTimer />\n//         < ButtonPlay click = { visualCountDown} titleBtn = {' '}/>\n//     </div>\n//   );\n// };\n\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js"],"names":["React","useState","CountDown","StopTimer","ButtonPlay","Timer","paused","setPaused","over","setOver","h","m","s","setTime","tick_tuck","reset","parseInt","hours","minutes","seconds","useEffect","timerID","setInterval","clearInterval","toString","padStart","ReactDOM","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport CountDown from \"./CountDown\";\nimport StopTimer from \"./StopTimer\";\nimport ButtonPlay from \"./ButtonPlay\";\nimport \"./App.css\";\n\nconst Timer = () =>  {\n\n        const [paused, setPaused] = useState(false);\n        const [over, setOver] = useState(false);\n        const [[h, m, s], setTime] = useState([0, 0, 0]);\n      \n        const tick_tuck = () => {\n          if (paused || over) return;\n          if (h === 0 && m === 0 && s === 0) setOver(true);\n          else if (m === 0 && s === 0) {\n            setTime([h - 1, 59, 59]);\n          } else if (s == 0) {\n            setTime([h, m - 1, 59]);\n          } else {\n            setTime([h, m, s - 1]);\n          }\n        };\n      \n        const reset = () => {\n          setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n          setPaused(false);\n          setOver(false);\n        };\n      \n        React.useEffect(() => {\n          const timerID = setInterval(() => tick_tuck(), 1000);\n          return () => clearInterval(timerID);\n        });\n      \n        return (\n          <div>\n            <p>{`${h.toString().padStart(2, '0')}:\n            ${m.toString().padStart(2, '0')}:\n            ${s.toString().padStart(2, '0')}`}</p>\n            <div>{over ? \"Time's up!\" : ''}</div>\n            <button onClick={() => setPaused(!paused)}>\n              {paused ? 'Resume' : 'Pause'}\n            </button>\n            <button onClick={() => reset()}>Restart</button>\n          </div>\n        );\n      };\n      \n      ReactDOM.render(\n        <CountDown hours={1} minutes={45} />,\n        document.getElementById('root')\n      );\n      \n//   return (\n//     <div>\n\n//         < CountDown />\n//         < StopTimer />\n//         < ButtonPlay click = { visualCountDown} titleBtn = {' '}/>\n\n//     </div>\n//   );\n// };\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}