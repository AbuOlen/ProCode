{"ast":null,"code":"var _jsxFileName = \"/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CountDown from \"./CountDown\";\nimport StopTimer from \"./StopTimer\";\nimport ButtonPlay from \"./ButtonPlay\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = () => {\n  _s();\n\n  let hours = 0;\n  let minutes = 0;\n  let seconds = 0;\n  const [paused, setPaused] = useState(false);\n  const [over, setOver] = useState(false);\n  const [[h, m, s], setTime] = useState([0, 0, 0]);\n  const valueButton = [{\n    name: 'inactive',\n    value: '&#xe807'\n  }, {\n    name: 'active',\n    value: '\\ue807'\n  }, {\n    name: 'pause',\n    value: '\\u01C1'\n  }];\n\n  const setTimer = () => {\n    if (paused || over) return;\n    if (h === 0 && m === 0 && s === 0) setOver(true);else if (m === 0 && s === 0) {\n      setTime([h - 1, 59, 59]);\n    } else if (s === 0) {\n      setTime([h, m - 1, 59]);\n    } else {\n      setTime([h, m, s - 1]);\n    }\n  };\n\n  const reset = () => {\n    setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n    setPaused(false);\n    setOver(false);\n  };\n\n  useEffect(() => {\n    const timerID = setInterval(() => setTimer(), 1000);\n    return () => clearInterval(timerID);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player\",\n      children: [/*#__PURE__*/_jsxDEV(CountDown, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(ButtonPlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(StopTimer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 17\n  }, this);\n}; //   render(\n//     <CountDown hours={1} minutes={45} />,\n//     document.getElementById('root')\n//   );\n//   return (\n//     <div>\n//         < CountDown />\n//         < StopTimer />\n//         < ButtonPlay click = { visualCountDown} titleBtn = {' '}/>\n//     </div>\n//   );\n// };\n\n\n_s(Timer, \"UEcDb4NCf6ekznsU9p2G/i8aMQc=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js"],"names":["React","useState","useEffect","CountDown","StopTimer","ButtonPlay","Timer","hours","minutes","seconds","paused","setPaused","over","setOver","h","m","s","setTime","valueButton","name","value","setTimer","reset","parseInt","timerID","setInterval","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,WAAP;;;AAEA,MAAMC,KAAK,GAAG,MAAO;AAAA;;AAEjB,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,OAAO,GAAG,CAAd;AAEA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAAC,CAACa,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAD,EAAYC,OAAZ,IAAuBhB,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,CAArC;AAEA,QAAMiB,WAAW,GAAG,CAChB;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAC;AAAzB,GADgB,EAEhB;AAACD,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAC;AAAvB,GAFgB,EAGhB;AAACD,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAC;AAAtB,GAHgB,CAApB;;AAMI,QAAMC,QAAQ,GAAG,MAAM;AACrB,QAAIX,MAAM,IAAIE,IAAd,EAAoB;AACpB,QAAIE,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAAjB,IAAsBC,CAAC,KAAK,CAAhC,EAAmCH,OAAO,CAAC,IAAD,CAAP,CAAnC,KACK,IAAIE,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AAC3BC,MAAAA,OAAO,CAAC,CAACH,CAAC,GAAG,CAAL,EAAQ,EAAR,EAAY,EAAZ,CAAD,CAAP;AACD,KAFI,MAEE,IAAIE,CAAC,KAAK,CAAV,EAAa;AAClBC,MAAAA,OAAO,CAAC,CAACH,CAAD,EAAIC,CAAC,GAAG,CAAR,EAAW,EAAX,CAAD,CAAP;AACD,KAFM,MAEA;AACLE,MAAAA,OAAO,CAAC,CAACH,CAAD,EAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,CAAD,CAAP;AACD;AACF,GAVD;;AAYA,QAAMM,KAAK,GAAG,MAAM;AAClBL,IAAAA,OAAO,CAAC,CAACM,QAAQ,CAAChB,KAAD,CAAT,EAAkBgB,QAAQ,CAACf,OAAD,CAA1B,EAAqCe,QAAQ,CAACd,OAAD,CAA7C,CAAD,CAAP;AACAE,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAE,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAJD;;AAMAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,OAAO,GAAGC,WAAW,CAAC,MAAMJ,QAAQ,EAAf,EAAmB,IAAnB,CAA3B;AACA,WAAO,MAAMK,aAAa,CAACF,OAAD,CAA1B;AACD,GAHQ,CAAT;AAKD,sBAAS;AAAA,4BACN;AAAK,MAAA,SAAS,EAAE,QAAhB;AAAA,8BACI,QAAE,SAAF;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI,QAAE,UAAF;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADM,eAaN,QAAE,SAAF;AAAA;AAAA;AAAA;AAAA,YAbM;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AAgBA,CAvDP,C,CAyDI;AACA;AACA;AACA;AAEJ;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;GAvEMlB,K;;KAAAA,K;AAyEN,eAAeA,KAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport CountDown from \"./CountDown\";\nimport StopTimer from \"./StopTimer\";\nimport ButtonPlay from \"./ButtonPlay\";\nimport \"./App.css\";\n\nconst Timer = () =>  {\n    \n    let hours = 0;\n    let minutes = 0;\n    let seconds = 0;\n\n    const [paused, setPaused] = useState(false);\n    const [over, setOver] = useState(false);\n    const [[h, m, s], setTime] = useState([0, 0, 0]);\n    \n    const valueButton = [\n        {name: 'inactive', value:'&#xe807' },\n        {name: 'active', value:'\\ue807' },\n        {name: 'pause', value:'\\u01C1' },\n    ];\n      \n        const setTimer = () => {\n          if (paused || over) return;\n          if (h === 0 && m === 0 && s === 0) setOver(true);\n          else if (m === 0 && s === 0) {\n            setTime([h - 1, 59, 59]);\n          } else if (s === 0) {\n            setTime([h, m - 1, 59]);\n          } else {\n            setTime([h, m, s - 1]);\n          }\n        };\n      \n        const reset = () => {\n          setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n          setPaused(false);\n          setOver(false);\n        };\n      \n        useEffect(() => {\n          const timerID = setInterval(() => setTimer(), 1000);\n          return () => clearInterval(timerID);\n        });\n    \n       return ( <div>\n          <div className =\"player\">\n              < CountDown />\n              \n              < ButtonPlay />\n\n            \n            {/* <button onClick={() => setPaused(!paused)}>\n              {paused ? 'Resume' : 'Pause'}\n            </button>\n            <button onClick={() => reset()}>Restart</button> */}\n            \n          </div>\n          < StopTimer />\n          </div>\n        );\n      };\n      \n    //   render(\n    //     <CountDown hours={1} minutes={45} />,\n    //     document.getElementById('root')\n    //   );\n      \n//   return (\n//     <div>\n\n//         < CountDown />\n//         < StopTimer />\n//         < ButtonPlay click = { visualCountDown} titleBtn = {' '}/>\n\n//     </div>\n//   );\n// };\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}