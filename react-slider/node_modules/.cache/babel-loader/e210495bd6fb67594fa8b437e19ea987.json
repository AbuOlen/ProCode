{"ast":null,"code":"var _jsxFileName = \"/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CountDown from \"./CountDown\"; // import StopTimer from \"./StopTimer\";\n// import ButtonPlay from \"./ButtonPlay\";\n\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = () => {\n  _s();\n\n  let hours = 0;\n  let minutes = 0;\n  let seconds = 0;\n  const [paused, setPaused] = useState(false);\n  const [over, setOver] = useState(false);\n  const [[h, m, s], setTime] = useState([0, 0, 0]);\n\n  const tick_tuck = () => {\n    if (paused || over) return;\n    if (h === 0 && m === 0 && s === 0) setOver(true);else if (m === 0 && s === 0) {\n      setTime([h - 1, 59, 59]);\n    } else if (s === 0) {\n      setTime([h, m - 1, 59]);\n    } else {\n      setTime([h, m, s - 1]);\n    }\n  };\n\n  const reset = () => {\n    setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n    setPaused(false);\n    setOver(false);\n  };\n\n  useEffect(() => {\n    const timerID = setInterval(() => tick_tuck(), 1000);\n    return () => clearInterval(timerID);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: `${h.toString().padStart(2, '0')}:\n            ${m.toString().padStart(2, '0')}:\n            ${s.toString().padStart(2, '0')}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setPaused(!paused),\n      children: paused ? 'Resume' : 'Pause'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => reset(),\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      class: \"button_play\",\n      type: \"button\",\n      value: \"&#xe807\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      class: \"time\",\n      type: \"time\",\n      id: \"appt\",\n      name: \"appt\",\n      min: \"00:00\",\n      max: \"24:00\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 11\n  }, this);\n}; //   render(\n//     <CountDown hours={1} minutes={45} />,\n//     document.getElementById('root')\n//   );\n//   return (\n//     <div>\n//         < CountDown />\n//         < StopTimer />\n//         < ButtonPlay click = { visualCountDown} titleBtn = {' '}/>\n//     </div>\n//   );\n// };\n\n\n_s(Timer, \"UEcDb4NCf6ekznsU9p2G/i8aMQc=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js"],"names":["React","useState","useEffect","CountDown","Timer","hours","minutes","seconds","paused","setPaused","over","setOver","h","m","s","setTime","tick_tuck","reset","parseInt","timerID","setInterval","clearInterval","toString","padStart"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport CountDown from \"./CountDown\";\n// import StopTimer from \"./StopTimer\";\n// import ButtonPlay from \"./ButtonPlay\";\nimport \"./App.css\";\n\nconst Timer = () =>  {\n    let hours = 0;\n    let minutes = 0;\n    let seconds = 0;\n        const [paused, setPaused] = useState(false);\n        const [over, setOver] = useState(false);\n        const [[h, m, s], setTime] = useState([0, 0, 0]);\n      \n        const tick_tuck = () => {\n          if (paused || over) return;\n          if (h === 0 && m === 0 && s === 0) setOver(true);\n          else if (m === 0 && s === 0) {\n            setTime([h - 1, 59, 59]);\n          } else if (s === 0) {\n            setTime([h, m - 1, 59]);\n          } else {\n            setTime([h, m, s - 1]);\n          }\n        };\n      \n        const reset = () => {\n          setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n          setPaused(false);\n          setOver(false);\n        };\n      \n        useEffect(() => {\n          const timerID = setInterval(() => tick_tuck(), 1000);\n          return () => clearInterval(timerID);\n        });\n      \n        return (\n          <div>\n            <p>{`${h.toString().padStart(2, '0')}:\n            ${m.toString().padStart(2, '0')}:\n            ${s.toString().padStart(2, '0')}`}</p>\n            \n            <button onClick={() => setPaused(!paused)}>\n              {paused ? 'Resume' : 'Pause'}\n            </button>\n            <button onClick={() => reset()}>Restart</button>\n            <input class=\"button_play\" type=\"button\" value={\"&#xe807\"} />\n            <input class=\"time\" type=\"time\" id=\"appt\" name=\"appt\" min=\"00:00\" max=\"24:00\" required />\n          </div>\n        );\n      };\n      \n    //   render(\n    //     <CountDown hours={1} minutes={45} />,\n    //     document.getElementById('root')\n    //   );\n      \n//   return (\n//     <div>\n\n//         < CountDown />\n//         < StopTimer />\n//         < ButtonPlay click = { visualCountDown} titleBtn = {' '}/>\n\n//     </div>\n//   );\n// };\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}