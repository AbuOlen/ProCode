{"ast":null,"code":"var _jsxFileName = \"/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CountDown from \"./CountDown\";\nimport StopTimer from \"./StopTimer\";\nimport ButtonPlay from \"./ButtonPlay\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let countDownTime = new Date();\n  let distance = 0;\n  let now = new Date();\n  let timerId = null;\n  let hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n  let minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n  let seconds = Math.floor(distance % (1000 * 60) / 1000);\n  const [paused, setPaused] = useState(false);\n  const [over, setOver] = useState(false);\n  const [[h, min, sec], setTime] = useState([0, 0, 0]);\n  const titleButton = [{\n    name: \"inactive\",\n    value: \"&#xe807\"\n  }, {\n    name: \"active\",\n    value: \"\\ue807\"\n  }, {\n    name: \"pause\",\n    value: \"\\u01C1\"\n  }];\n\n  const setTimer = () => {\n    distance -= 1000;\n\n    if (distance < 0) {\n      distance = 0;\n      stopTimer();\n    }\n\n    ;\n    let hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n    let minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n    let seconds = Math.floor(distance % (1000 * 60) / 1000);\n    h = hours.toString().padStart(2, \"0\");\n    min = minutes.toString().padStart(2, \"0\");\n    sec = seconds.toString().padStart(2, \"0\");\n  };\n\n  const stopTimer = () => {\n    clearInterval(timerId);\n  };\n\n  const visualCountDown = () => {\n    _s();\n\n    if (timerId === null) {\n      let endDate = new Date();\n      let now = new Date();\n      let inputHM = setStopTime.value;\n      let a = hm.split(\":\");\n      endDate.setHours(+a[0]);\n      endDate.setMinutes(+a[1]);\n\n      if (endDate.getTime() < now.getTime()) {\n        distance = endDate.getTime() - now.getTime() + 1000 * 60 * 60 * 24;\n      } else {\n        distance = endDate.getTime() - now.getTime();\n      }\n\n      ;\n      useEffect(() => {\n        const timerID = setInterval(() => setTimer(), 1000);\n        return () => clearInterval(timerID);\n      });\n    }\n\n    if (paused || over) return;\n    if (h === 0 && m === 0 && s === 0) setOver(true);else if (m === 0 && s === 0) {\n      setTime([h - 1, 59, 59]);\n    } else if (s === 0) {\n      setTime([h, m - 1, 59]);\n    } else {\n      setTime([h, m, s - 1]);\n    }\n  };\n\n  _s(visualCountDown, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  const reset = () => {\n    setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n    setPaused(false);\n    setOver(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player\",\n      children: [/*#__PURE__*/_jsxDEV(CountDown, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonPlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StopTimer, {\n      setStopTime: {\n        h,\n        min,\n        sec\n      },\n      onChange: event => setTime(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 12\n  }, this);\n}; //   render(\n//     <CountDown hours={1} minutes={45} />,\n//     document.getElementById('root')\n//   );\n//   return (\n//     <div>\n//         < CountDown />\n//         < StopTimer />\n//         < ButtonPlay click = { visualCountDown} titleBtn = {' '}/>\n//     </div>\n//   );\n// };\n\n\n_s2(Timer, \"gZFnt8LnG+AuhhNYre7v8PBtLPE=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/marat/Documents/ProCode/react-timer/src/components/Timer.js"],"names":["React","useState","useEffect","CountDown","StopTimer","ButtonPlay","Timer","countDownTime","Date","distance","now","timerId","hours","Math","floor","minutes","seconds","paused","setPaused","over","setOver","h","min","sec","setTime","titleButton","name","value","setTimer","stopTimer","toString","padStart","clearInterval","visualCountDown","endDate","inputHM","setStopTime","a","hm","split","setHours","setMinutes","getTime","timerID","setInterval","m","s","reset","parseInt","event","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CountDown from \"./CountDown\";\nimport StopTimer from \"./StopTimer\";\nimport ButtonPlay from \"./ButtonPlay\";\nimport \"./App.css\";\n\nconst Timer = () => {\n  let countDownTime = new Date();\n  let distance = 0;\n  let now = new Date();\n  let timerId = null;\n  let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n  let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n  const [paused, setPaused] = useState(false);\n  const [over, setOver] = useState(false);\n  const [[h, min, sec], setTime] = useState([0, 0, 0]);\n\n  const titleButton = [\n    { name: \"inactive\", value: \"&#xe807\" },\n    { name: \"active\", value: \"\\ue807\" },\n    { name: \"pause\", value: \"\\u01C1\" },\n  ];\n\n  const setTimer = () => {\n    distance -= 1000;\n  if (distance < 0) {\n    distance = 0;\n    stopTimer();\n  };\n  let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n  let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n  h = hours.toString().padStart(2, \"0\");\n  min = minutes.toString().padStart(2, \"0\");\n  sec = seconds.toString().padStart(2, \"0\");\n  };\n  const stopTimer = () => {\n    clearInterval(timerId);\n  };\n\n  const visualCountDown = () => {\n    if (timerId === null) {\n      let endDate = new Date();\n      let now = new Date();\n      let inputHM = setStopTime.value;\n      let a = hm.split(\":\");\n    endDate.setHours(+a[0]);\n    endDate.setMinutes(+a[1]);\n\n    if (endDate.getTime() < now.getTime()) {\n        distance = endDate.getTime() - now.getTime() + 1000 * 60 * 60 * 24;\n      } else {\n        distance = endDate.getTime() - now.getTime();\n      };\nuseEffect(() => {\n    const timerID = setInterval(() => setTimer(), 1000);\n    return () => clearInterval(timerID);\n  });\n\n    }\n    if (paused || over) return;\n    if (h === 0 && m === 0 && s === 0) setOver(true);\n    else if (m === 0 && s === 0) {\n      setTime([h - 1, 59, 59]);\n    } else if (s === 0) {\n      setTime([h, m - 1, 59]);\n    } else {\n      setTime([h, m, s - 1]);\n    }\n  };\n\n  const reset = () => {\n    setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n    setPaused(false);\n    setOver(false);\n  };\n\n  \n\n  return ( <div>\n      <div className=\"player\">\n        <CountDown />\n\n        <ButtonPlay \n        \n        />\n\n        {/* <button onClick={() => setPaused(!paused)}>\n              {paused ? 'Resume' : 'Pause'}\n            </button>\n            <button onClick={() => reset()}>Restart</button> */}\n      </div>\n      <StopTimer setStopTime = {{h, min, sec}} \n        onChange={ event => setTime(event.target.value)} /> \n    </div>\n  );\n};\n\n//   render(\n//     <CountDown hours={1} minutes={45} />,\n//     document.getElementById('root')\n//   );\n\n//   return (\n//     <div>\n\n//         < CountDown />\n//         < StopTimer />\n//         < ButtonPlay click = { visualCountDown} titleBtn = {' '}/>\n\n//     </div>\n//   );\n// };\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}